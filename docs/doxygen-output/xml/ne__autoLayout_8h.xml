<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="ne__autoLayout_8h" kind="file" language="C++">
    <compoundname>ne_autoLayout.h</compoundname>
    <includes refid="ne__network_8h" local="yes">sbne/network/ne_network.h</includes>
    <includedby refid="ne__layout_8h" local="yes">/Users/home/Documents/Education/SB/Projects/Made/SBNE/sbne/SBNE/src/sbne/sbml/ne_layout.h</includedby>
    <includedby refid="ne__autoLayout_8cpp" local="yes">/Users/home/Documents/Education/SB/Projects/Made/SBNE/sbne/SBNE/src/sbne/layout/ne_autoLayout.cpp</includedby>
    <incdepgraph>
      <node id="8">
        <label>sbne/layout/ne_layoutBox.h</label>
        <link refid="ne__layoutBox_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>sbne/network/ne_network.h</label>
        <link refid="ne__network_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/home/Documents/Education/SB/Projects/Made/SBNE/sbne/SBNE/src/sbne/layout/ne_autoLayout.h</label>
        <link refid="ne__autoLayout_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>sbne/layout/ne_layoutPoint.h</label>
        <link refid="ne__layoutPoint_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>sbml/SBMLTypes.h</label>
      </node>
      <node id="6">
        <label>sbne/core/ne_core.h</label>
      </node>
      <node id="4">
        <label>sbml/packages/layout/common/LayoutExtensionTypes.h</label>
      </node>
      <node id="5">
        <label>sbml/packages/render/common/RenderExtensionTypes.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>/Users/home/Documents/Education/SB/Projects/Made/SBNE/sbne/SBNE/src/sbne/sbml/ne_render.h</label>
        <link refid="ne__render_8h_source"/>
      </node>
      <node id="1">
        <label>/Users/home/Documents/Education/SB/Projects/Made/SBNE/sbne/SBNE/src/sbne/layout/ne_autoLayout.h</label>
        <link refid="ne__autoLayout_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/Users/home/Documents/Education/SB/Projects/Made/SBNE/sbne/SBNE/src/sbne/sbml/ne_layout.h</label>
        <link refid="ne__layout_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacesbne">sbne</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__NE_AUTOLAYOUT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__NE_AUTOLAYOUT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sbne/network/ne_network.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">sbne<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>locateCompartmentItems(Network*<sp/>net,<sp/>NCompartment*<sp/>c);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>locateUnusedSpecies(NReaction*<sp/>r,<sp/>NSpecies*<sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>usedSpeciesSAngle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>usedSpeciesEAngle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>lastUsedSpeciesIndex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>index);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>locateUsedSpecies(NReaction*<sp/>r,<sp/>NSpecies*<sp/>s,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>usedSpeciesSAngle,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>usedSpeciesEAngle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>index);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>locateSReference(NReaction*<sp/>r,<sp/>NSpeciesReference*<sp/>sr);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setReactionCurve(NReaction*<sp/>r);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>locateReactionSpecies(Network*<sp/>net,<sp/>NReaction*<sp/>mR,<sp/>NReaction*<sp/>r,<sp/>std::vector&lt;NSpecies*&gt;&amp;<sp/>locatedMainReactionSpecies);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>neighborMutualSpecies(NReaction*<sp/>cR<sp/>,std::vector&lt;NSpecies*&gt;<sp/>mutualSpecies);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>neighborTwoSpecies(NReaction*<sp/>cR,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>index1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>index2);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swapSpeciesPositions(NSpecies*<sp/>s1,<sp/>NSpecies*<sp/>s2);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setSubReactionToReaction(NReaction*<sp/>mR,<sp/>NReaction*<sp/>cR,<sp/>NReaction*<sp/>r,<sp/>std::vector&lt;NSpecies*&gt;<sp/>mutualSpecies);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>identifyMainAndSubReactions(NCompartment*<sp/>c);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addReferencedSideToSpecies(NReaction*<sp/>r,<sp/>NSpecies*<sp/>s,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">NSpecies*<sp/>getPseudoSpecies(NReaction*<sp/>mR,<sp/>NReaction*<sp/>cR,<sp/>std::vector&lt;NSpecies*&gt;<sp/>mutualSpecies);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>adjustSpeciesBoxPosition(NSpecies*<sp/>s,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LBox<sp/>getSpeciesBoxOriginalPosition(NSpecies*<sp/>s);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LBox<sp/>getSpeciesBoxOriginalPosition(NReaction*<sp/>r,<sp/>NSpecies*<sp/>s);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">std::vector&lt;NSpecies*&gt;<sp/>findTheSameSpecies(std::vector&lt;NSpecies*&gt;<sp/>sv1,<sp/>std::vector&lt;NSpecies*&gt;<sp/>sv2);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>packReactionsIntoCompartment(NCompartment*<sp/>c);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>packCompartmentsIntoNetwork(Network*<sp/>net);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>locateReactionSpeciesReferences(NReaction*<sp/>r);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SpcSide<sp/>getSReferenceSpeciesSide(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LPoint&amp;<sp/>speciesBoxPoint,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LPoint&amp;<sp/>mReactionInnerLayerPoint);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LPoint<sp/>getSReferenceSpeciesBoxPoint(NSpecies*<sp/>s,<sp/>NSpeciesReference*<sp/>sr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SpcSide<sp/>side);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LPoint<sp/>getSReferenceReactionEndPoint(NReaction*<sp/>r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>sRAngle,<sp/>RxnEnd&amp;<sp/>rxnEnd);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LPoint<sp/>getSReferenceReactionSidePoint(NReaction*<sp/>r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>sRAngle,<sp/>RxnSide&amp;<sp/>rxnSide);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setSpeciesReferenceCurve(NReaction*<sp/>mR,<sp/>NReaction*<sp/>r,<sp/>NSpeciesReference*<sp/>sr,<sp/>NSpecies*<sp/>pseudoSpecies,<sp/>SpcSide<sp/>speciesSide,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RxnEnd<sp/>rxnEnd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RxnSide<sp/>rxnSide);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">LLineSegment*<sp/>extendCurve(LCurve*<sp/>curve,<sp/>LLineSegment*<sp/>l,<sp/>LPoint&amp;<sp/>startPoint,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>dx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>dy);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">LLineSegment*<sp/>extendCurve(LCurve*<sp/>curve,<sp/>LLineSegment*<sp/>l,<sp/>LPoint&amp;<sp/>startPoint,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LPoint&amp;<sp/>newPoint);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">LLineSegment*<sp/>extendCurve(LCurve*<sp/>curve,<sp/>LLineSegment*<sp/>l,<sp/>LPoint&amp;<sp/>startPoint,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LPoint&amp;<sp/>newPoint,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LPoint&amp;<sp/>basePoint1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LPoint&amp;<sp/>basePoint2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>isArcLike);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calculateCurvePointsFeatures(NReaction*<sp/>mR,<sp/>NReaction*<sp/>r,<sp/>NSpecies*<sp/>pseudoSpecies,<sp/>NSpeciesReference*<sp/>sr,<sp/>LPoint&amp;<sp/>pseudoPoint,<sp/>LPoint&amp;<sp/>basePoint1,<sp/>LPoint&amp;<sp/>basePoint2,<sp/>LPoint&amp;<sp/>mReactionOuterLayerPoint,<sp/>LPoint&amp;<sp/>mReactionInnerLayerPoint,<sp/>LPoint&amp;<sp/>offsetOnLayer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LPoint&amp;<sp/>offsetOnReaction,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offsetOnReactionSign,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>numTransferringSteps);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">std::vector&lt;std::vector&lt;LPoint*&gt;&gt;<sp/>convertManhatanPathToPoints(NReaction*<sp/>mR,<sp/>NSpecies*<sp/>species,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::pair&lt;int,<sp/>int&gt;&gt;&amp;<sp/>manhatanPath);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/home/Documents/Education/SB/Projects/Made/SBNE/sbne/SBNE/src/sbne/layout/ne_autoLayout.h"/>
  </compounddef>
</doxygen>
